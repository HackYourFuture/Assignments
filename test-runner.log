2024-08-09 07:07:16 info: ----------------------------------------------
2024-08-09 07:07:16 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 07:07:16 info: ----------------------------------------------
2024-08-09 07:07:20 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (2 ms)
    × should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    × should take a single parameter
    × should include a `compliments` array inside its function body (1 ms)
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      103 | function testTodosRemoved(getSource) {
      104 |   test('should have all TODO comments removed', () => {
    > 105 |     expect(/\bTODO\b/.test(getSource())).toBeFalsy();
          |                                          ^
      106 |   });
      107 | }
      108 |

      at Object.toBeFalsy (test-runner/unit-test-helpers.js:105:42)

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Expected length:   1
    Received length:   0
    Received function: [Function giveCompliment]

      37 |
      38 |   test('should take a single parameter', () => {
    > 39 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      40 |   });
      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:39:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {
    > 43 |     expect(state.compliments).toBeDefined();
         |                               ^
      44 |   });
      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:43:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 47 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      48 |     expect(
      49 |       state.compliments.every((compliment) => typeof compliment === 'string')
      50 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:47:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      54 |     expect(giveCompliment).toBeDefined();
    > 55 |     expect(state.compliments).toBeDefined();
         |                               ^
      56 |
      57 |     const name = 'HackYourFuture';
      58 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:55:31)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 2 passed, 7 total
Snapshots:   0 total
Time:        0.575 s, estimated 1 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 07:14:12 info: ----------------------------------------------
2024-08-09 07:14:12 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 07:14:12 info: ----------------------------------------------
2024-08-09 07:14:17 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (2 ms)
    × should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    × should take a single parameter (1 ms)
    × should include a `compliments` array inside its function body (1 ms)
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      103 | function testTodosRemoved(getSource) {
      104 |   test('should have all TODO comments removed', () => {
    > 105 |     expect(/\bTODO\b/.test(getSource())).toBeFalsy();
          |                                          ^
      106 |   });
      107 | }
      108 |

      at Object.toBeFalsy (test-runner/unit-test-helpers.js:105:42)

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Expected length:   1
    Received length:   0
    Received function: [Function giveCompliment]

      37 |
      38 |   test('should take a single parameter', () => {
    > 39 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      40 |   });
      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:39:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {
    > 43 |     expect(state.compliments).toBeDefined();
         |                               ^
      44 |   });
      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:43:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 47 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      48 |     expect(
      49 |       state.compliments.every((compliment) => typeof compliment === 'string')
      50 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:47:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      54 |     expect(giveCompliment).toBeDefined();
    > 55 |     expect(state.compliments).toBeDefined();
         |                               ^
      56 |
      57 |     const name = 'HackYourFuture';
      58 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:55:31)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 2 passed, 7 total
Snapshots:   0 total
Time:        1.709 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 07:16:22 info: ----------------------------------------------
2024-08-09 07:16:22 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 07:16:22 info: ----------------------------------------------
2024-08-09 07:16:27 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (1 ms)
    × should have all TODO comments removed (2 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    × should take a single parameter (2 ms)
    × should include a `compliments` array inside its function body
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      103 | function testTodosRemoved(getSource) {
      104 |   test('should have all TODO comments removed', () => {
    > 105 |     expect(/\bTODO\b/.test(getSource())).toBeFalsy();
          |                                          ^
      106 |   });
      107 | }
      108 |

      at Object.toBeFalsy (test-runner/unit-test-helpers.js:105:42)

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Expected length:   1
    Received length:   0
    Received function: [Function giveCompliment]

      37 |
      38 |   test('should take a single parameter', () => {
    > 39 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      40 |   });
      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:39:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {
    > 43 |     expect(state.compliments).toBeDefined();
         |                               ^
      44 |   });
      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:43:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 47 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      48 |     expect(
      49 |       state.compliments.every((compliment) => typeof compliment === 'string')
      50 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:47:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      54 |     expect(giveCompliment).toBeDefined();
    > 55 |     expect(state.compliments).toBeDefined();
         |                               ^
      56 |
      57 |     const name = 'HackYourFuture';
      58 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:55:31)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 2 passed, 7 total
Snapshots:   0 total
Time:        1.036 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 07:17:12 info: ----------------------------------------------
2024-08-09 07:17:12 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 07:17:12 info: ----------------------------------------------
2024-08-09 07:17:16 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (1 ms)
    × should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls
    × should take a single parameter (1 ms)
    × should include a `compliments` array inside its function body
    × the `compliments` array should be initialized with 10 strings (1 ms)
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      103 | function testTodosRemoved(getSource) {
      104 |   test('should have all TODO comments removed', () => {
    > 105 |     expect(/\bTODO\b/.test(getSource())).toBeFalsy();
          |                                          ^
      106 |   });
      107 | }
      108 |

      at Object.toBeFalsy (test-runner/unit-test-helpers.js:105:42)

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has type:  object
    Received has value: {"default": [Function giveCompliment]}

      37 |
      38 |   test('should take a single parameter', () => {
    > 39 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      40 |   });
      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:39:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {
    > 43 |     expect(state.compliments).toBeDefined();
         |                               ^
      44 |   });
      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:43:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 47 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      48 |     expect(
      49 |       state.compliments.every((compliment) => typeof compliment === 'string')
      50 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:47:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      54 |     expect(giveCompliment).toBeDefined();
    > 55 |     expect(state.compliments).toBeDefined();
         |                               ^
      56 |
      57 |     const name = 'HackYourFuture';
      58 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:55:31)

Test Suites: 1 failed, 1 total
Tests:       5 failed, 2 passed, 7 total
Snapshots:   0 total
Time:        1.03 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 07:18:34 info: ----------------------------------------------
2024-08-09 07:18:34 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 07:18:34 info: ----------------------------------------------
2024-08-09 07:18:39 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    × should take a single parameter (1 ms)
    × should include a `compliments` array inside its function body (1 ms)
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has type:  object
    Received has value: {"default": [Function giveCompliment]}

      37 |
      38 |   test('should take a single parameter', () => {
    > 39 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      40 |   });
      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:39:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {
    > 43 |     expect(state.compliments).toBeDefined();
         |                               ^
      44 |   });
      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:43:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 47 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      48 |     expect(
      49 |       state.compliments.every((compliment) => typeof compliment === 'string')
      50 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:47:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      54 |     expect(giveCompliment).toBeDefined();
    > 55 |     expect(state.compliments).toBeDefined();
         |                               ^
      56 |
      57 |     const name = 'HackYourFuture';
      58 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:55:31)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 3 passed, 7 total
Snapshots:   0 total
Time:        1.028 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 07:20:29 info: ----------------------------------------------
2024-08-09 07:20:29 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 07:20:29 info: ----------------------------------------------
2024-08-09 07:20:34 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed
    √ `giveCompliment` should not contain unneeded console.log calls
    × should take a single parameter (2 ms)
    × should include a `compliments` array inside its function body (1 ms)
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has type:  object
    Received has value: {"default": [Function giveCompliment]}

      38 |
      39 |   test('should take a single parameter', () => {
    > 40 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      41 |   });
      42 |
      43 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:40:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      42 |
      43 |   test('should include a `compliments` array inside its function body', () => {
    > 44 |     expect(state.compliments).toBeDefined();
         |                               ^
      45 |   });
      46 |
      47 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:44:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      46 |
      47 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 48 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      49 |     expect(
      50 |       state.compliments.every((compliment) => typeof compliment === 'string')
      51 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:48:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      54 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      55 |     expect(giveCompliment).toBeDefined();
    > 56 |     expect(state.compliments).toBeDefined();
         |                               ^
      57 |
      58 |     const name = 'HackYourFuture';
      59 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:56:31)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 3 passed, 7 total
Snapshots:   0 total
Time:        1.034 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 09:11:25 info: ----------------------------------------------
2024-08-09 09:11:25 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 09:11:25 info: ----------------------------------------------
2024-08-09 09:11:30 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed
    √ `giveCompliment` should not contain unneeded console.log calls
    × should take a single parameter (2 ms)
    × should include a `compliments` array inside its function body (1 ms)
    × the `compliments` array should be initialized with 10 strings (1 ms)
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has type:  object
    Received has value: {"default": [Function giveCompliment]}

      38 |
      39 |   test('should take a single parameter', () => {
    > 40 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      41 |   });
      42 |
      43 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:40:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      42 |
      43 |   test('should include a `compliments` array inside its function body', () => {
    > 44 |     expect(state.compliments).toBeDefined();
         |                               ^
      45 |   });
      46 |
      47 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:44:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      46 |
      47 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 48 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      49 |     expect(
      50 |       state.compliments.every((compliment) => typeof compliment === 'string')
      51 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:48:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      54 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      55 |     expect(giveCompliment).toBeDefined();
    > 56 |     expect(state.compliments).toBeDefined();
         |                               ^
      57 |
      58 |     const name = 'HackYourFuture';
      59 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:56:31)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 3 passed, 7 total
Snapshots:   0 total
Time:        0.947 s, estimated 1 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 09:51:29 info: ----------------------------------------------
2024-08-09 09:51:29 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 09:51:29 info: ----------------------------------------------
2024-08-09 09:51:34 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls
    × should take a single parameter (2 ms)
    × should include a `compliments` array inside its function body
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has type:  object
    Received has value: {"default": [Function giveCompliment]}

      37 |
      38 |   test('should take a single parameter', () => {
    > 39 |     expect(giveCompliment).toHaveLength(1);
         |                            ^
      40 |   });
      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:39:28)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      41 |
      42 |   test('should include a `compliments` array inside its function body', () => {
    > 43 |     expect(state.compliments).toBeDefined();
         |                               ^
      44 |   });
      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:43:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      45 |
      46 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 47 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      48 |     expect(
      49 |       state.compliments.every((compliment) => typeof compliment === 'string')
      50 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:47:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      53 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      54 |     expect(giveCompliment).toBeDefined();
    > 55 |     expect(state.compliments).toBeDefined();
         |                               ^
      56 |
      57 |     const name = 'HackYourFuture';
      58 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:55:31)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 3 passed, 7 total
Snapshots:   0 total
Time:        1.277 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-09 10:49:16 info: ----------------------------------------------
2024-08-09 10:49:16 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-09 10:49:16 info: ----------------------------------------------
2024-08-09 10:49:21 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed
    √ `giveCompliment` should not contain unneeded console.log calls
    √ should take a single parameter
    × should include a `compliments` array inside its function body (1 ms)
    × the `compliments` array should be initialized with 10 strings (1 ms)
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      47 |
      48 |   test('should include a `compliments` array inside its function body', () => {
    > 49 |     expect(state.compliments).toBeDefined();
         |                               ^
      50 |   });
      51 |
      52 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:49:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      51 |
      52 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 53 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      54 |     expect(
      55 |       state.compliments.every((compliment) => typeof compliment === 'string')
      56 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:53:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      59 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      60 |     expect(giveCompliment).toBeDefined();
    > 61 |     expect(state.compliments).toBeDefined();
         |                               ^
      62 |
      63 |     const name = 'HackYourFuture';
      64 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:61:31)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        1.435 s, estimated 4 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
2024-08-10 09:52:03 info: ----------------------------------------------
2024-08-10 09:52:03 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 09:52:03 info: ----------------------------------------------
2024-08-10 09:52:55 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js (46.974 s)
  giveCompliment
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    √ should take a single parameter (25554 ms)
    × should include a `compliments` array inside its function body (2 ms)
    × the `compliments` array should be initialized with 10 strings (1 ms)
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      47 |
      48 |   test('should include a `compliments` array inside its function body', () => {
    > 49 |     expect(state.compliments).toBeDefined();
         |                               ^
      50 |   });
      51 |
      52 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:49:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      51 |
      52 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 53 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      54 |     expect(
      55 |       state.compliments.every((compliment) => typeof compliment === 'string')
      56 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:53:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      59 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      60 |     expect(giveCompliment).toBeDefined();
    > 61 |     expect(state.compliments).toBeDefined();
         |                               ^
      62 |
      63 |     const name = 'HackYourFuture';
      64 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:61:31)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        47.543 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 09:53:19 info: ----------------------------------------------
2024-08-10 09:53:19 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 09:53:19 info: ----------------------------------------------
2024-08-10 09:54:27 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js (63.474 s)
  giveCompliment
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    √ should take a single parameter (6332 ms)
    × should include a `compliments` array inside its function body (2 ms)
    × the `compliments` array should be initialized with 10 strings (2 ms)
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      47 |
      48 |   test('should include a `compliments` array inside its function body', () => {
    > 49 |     expect(state.compliments).toBeDefined();
         |                               ^
      50 |   });
      51 |
      52 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:49:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      51 |
      52 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 53 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      54 |     expect(
      55 |       state.compliments.every((compliment) => typeof compliment === 'string')
      56 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:53:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      59 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      60 |     expect(giveCompliment).toBeDefined();
    > 61 |     expect(state.compliments).toBeDefined();
         |                               ^
      62 |
      63 |     const name = 'HackYourFuture';
      64 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:61:31)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        63.995 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 09:54:53 info: ----------------------------------------------
2024-08-10 09:54:53 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 09:54:53 info: ----------------------------------------------
2024-08-10 09:55:09 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js (9.114 s)
  giveCompliment
    √ should exist and be executable (2 ms)
    √ should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    √ should take a single parameter (1 ms)
    × should include a `compliments` array inside its function body (3 ms)
    × the `compliments` array should be initialized with 10 strings (2 ms)
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      46 |
      47 |   test('should include a `compliments` array inside its function body', () => {
    > 48 |     expect(state.compliments).toBeDefined();
         |                               ^
      49 |   });
      50 |
      51 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:48:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      50 |
      51 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 52 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      53 |     expect(
      54 |       state.compliments.every((compliment) => typeof compliment === 'string')
      55 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:52:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      58 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      59 |     expect(giveCompliment).toBeDefined();
    > 60 |     expect(state.compliments).toBeDefined();
         |                               ^
      61 |
      62 |     const name = 'HackYourFuture';
      63 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:60:31)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        9.966 s, estimated 64 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 09:55:38 info: ----------------------------------------------
2024-08-10 09:55:38 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 09:55:38 info: ----------------------------------------------
2024-08-10 09:56:37 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js (52.195 s)
  giveCompliment
    √ should exist and be executable (3 ms)
    √ should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    √ should take a single parameter (1 ms)
    × should include a `compliments` array inside its function body (8 ms)
    × the `compliments` array should be initialized with 10 strings (1 ms)
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should include a `compliments` array inside its function body

    expect(received).toBeDefined()

    Received: undefined

      46 |
      47 |   test('should include a `compliments` array inside its function body', () => {
    > 48 |     expect(state.compliments).toBeDefined();
         |                               ^
      49 |   });
      50 |
      51 |   test('the `compliments` array should be initialized with 10 strings', () => {

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:48:31)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      50 |
      51 |   test('the `compliments` array should be initialized with 10 strings', () => {
    > 52 |     expect(state.compliments).toHaveLength(10);
         |                               ^
      53 |     expect(
      54 |       state.compliments.every((compliment) => typeof compliment === 'string')
      55 |     ).toBe(true);

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:52:31)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      58 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
      59 |     expect(giveCompliment).toBeDefined();
    > 60 |     expect(state.compliments).toBeDefined();
         |                               ^
      61 |
      62 |     const name = 'HackYourFuture';
      63 |

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:60:31)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        52.998 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 09:57:24 info: ----------------------------------------------
2024-08-10 09:57:24 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 09:57:24 info: ----------------------------------------------
2024-08-10 09:58:42 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js (72.248 s)
  giveCompliment
    × should exist and be executable (1 ms)
    × should have all TODO comments removed
    × `giveCompliment` should not contain unneeded console.log calls
    × should take a single parameter
    × should include a `compliments` array inside its function body
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should exist and be executable

    SyntaxError: 'import' and 'export' may appear only with 'sourceType: module' (21:0)

      64 |   if (helperOptions.parse) {
      65 |     try {
    > 66 |       result.rootNode = acorn.parse(result.source, {
         |                               ^
      67 |         ecmaVersion: 2022,
      68 |         sourceType: 'module',
      69 |       });

      at Parser.pp$4.raise (node_modules/acorn/dist/acorn.js:3586:15)
      at Parser.raise [as parseStatement] (node_modules/acorn/dist/acorn.js:946:18)
      at Parser.parseStatement [as parseTopLevel] (node_modules/acorn/dist/acorn.js:829:23)
      at Parser.parseTopLevel [as parse] (node_modules/acorn/dist/acorn.js:601:17)
      at Function.parse (node_modules/acorn/dist/acorn.js:651:37)
      at Object.parse (node_modules/acorn/dist/acorn.js:6024:19)
      at parse (src/unit-test-helpers.js:66:31)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:15:37)

  ● giveCompliment › should have all TODO comments removed

    SyntaxError: 'import' and 'export' may appear only with 'sourceType: module' (21:0)

      64 |   if (helperOptions.parse) {
      65 |     try {
    > 66 |       result.rootNode = acorn.parse(result.source, {
         |                               ^
      67 |         ecmaVersion: 2022,
      68 |         sourceType: 'module',
      69 |       });

      at Parser.pp$4.raise (node_modules/acorn/dist/acorn.js:3586:15)
      at Parser.raise [as parseStatement] (node_modules/acorn/dist/acorn.js:946:18)
      at Parser.parseStatement [as parseTopLevel] (node_modules/acorn/dist/acorn.js:829:23)
      at Parser.parseTopLevel [as parse] (node_modules/acorn/dist/acorn.js:601:17)
      at Function.parse (node_modules/acorn/dist/acorn.js:651:37)
      at Object.parse (node_modules/acorn/dist/acorn.js:6024:19)
      at parse (src/unit-test-helpers.js:66:31)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:15:37)

  ● giveCompliment › `giveCompliment` should not contain unneeded console.log calls

    SyntaxError: 'import' and 'export' may appear only with 'sourceType: module' (21:0)

      64 |   if (helperOptions.parse) {
      65 |     try {
    > 66 |       result.rootNode = acorn.parse(result.source, {
         |                               ^
      67 |         ecmaVersion: 2022,
      68 |         sourceType: 'module',
      69 |       });

      at Parser.pp$4.raise (node_modules/acorn/dist/acorn.js:3586:15)
      at Parser.raise [as parseStatement] (node_modules/acorn/dist/acorn.js:946:18)
      at Parser.parseStatement [as parseTopLevel] (node_modules/acorn/dist/acorn.js:829:23)
      at Parser.parseTopLevel [as parse] (node_modules/acorn/dist/acorn.js:601:17)
      at Function.parse (node_modules/acorn/dist/acorn.js:651:37)
      at Object.parse (node_modules/acorn/dist/acorn.js:6024:19)
      at parse (src/unit-test-helpers.js:66:31)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:15:37)

  ● giveCompliment › should take a single parameter

    SyntaxError: 'import' and 'export' may appear only with 'sourceType: module' (21:0)

      64 |   if (helperOptions.parse) {
      65 |     try {
    > 66 |       result.rootNode = acorn.parse(result.source, {
         |                               ^
      67 |         ecmaVersion: 2022,
      68 |         sourceType: 'module',
      69 |       });

      at Parser.pp$4.raise (node_modules/acorn/dist/acorn.js:3586:15)
      at Parser.raise [as parseStatement] (node_modules/acorn/dist/acorn.js:946:18)
      at Parser.parseStatement [as parseTopLevel] (node_modules/acorn/dist/acorn.js:829:23)
      at Parser.parseTopLevel [as parse] (node_modules/acorn/dist/acorn.js:601:17)
      at Function.parse (node_modules/acorn/dist/acorn.js:651:37)
      at Object.parse (node_modules/acorn/dist/acorn.js:6024:19)
      at parse (src/unit-test-helpers.js:66:31)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:15:37)

  ● giveCompliment › should include a `compliments` array inside its function body

    SyntaxError: 'import' and 'export' may appear only with 'sourceType: module' (21:0)

      64 |   if (helperOptions.parse) {
      65 |     try {
    > 66 |       result.rootNode = acorn.parse(result.source, {
         |                               ^
      67 |         ecmaVersion: 2022,
      68 |         sourceType: 'module',
      69 |       });

      at Parser.pp$4.raise (node_modules/acorn/dist/acorn.js:3586:15)
      at Parser.raise [as parseStatement] (node_modules/acorn/dist/acorn.js:946:18)
      at Parser.parseStatement [as parseTopLevel] (node_modules/acorn/dist/acorn.js:829:23)
      at Parser.parseTopLevel [as parse] (node_modules/acorn/dist/acorn.js:601:17)
      at Function.parse (node_modules/acorn/dist/acorn.js:651:37)
      at Object.parse (node_modules/acorn/dist/acorn.js:6024:19)
      at parse (src/unit-test-helpers.js:66:31)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:15:37)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    SyntaxError: 'import' and 'export' may appear only with 'sourceType: module' (21:0)

      64 |   if (helperOptions.parse) {
      65 |     try {
    > 66 |       result.rootNode = acorn.parse(result.source, {
         |                               ^
      67 |         ecmaVersion: 2022,
      68 |         sourceType: 'module',
      69 |       });

      at Parser.pp$4.raise (node_modules/acorn/dist/acorn.js:3586:15)
      at Parser.raise [as parseStatement] (node_modules/acorn/dist/acorn.js:946:18)
      at Parser.parseStatement [as parseTopLevel] (node_modules/acorn/dist/acorn.js:829:23)
      at Parser.parseTopLevel [as parse] (node_modules/acorn/dist/acorn.js:601:17)
      at Function.parse (node_modules/acorn/dist/acorn.js:651:37)
      at Object.parse (node_modules/acorn/dist/acorn.js:6024:19)
      at parse (src/unit-test-helpers.js:66:31)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:15:37)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    SyntaxError: 'import' and 'export' may appear only with 'sourceType: module' (21:0)

      64 |   if (helperOptions.parse) {
      65 |     try {
    > 66 |       result.rootNode = acorn.parse(result.source, {
         |                               ^
      67 |         ecmaVersion: 2022,
      68 |         sourceType: 'module',
      69 |       });

      at Parser.pp$4.raise (node_modules/acorn/dist/acorn.js:3586:15)
      at Parser.raise [as parseStatement] (node_modules/acorn/dist/acorn.js:946:18)
      at Parser.parseStatement [as parseTopLevel] (node_modules/acorn/dist/acorn.js:829:23)
      at Parser.parseTopLevel [as parse] (node_modules/acorn/dist/acorn.js:601:17)
      at Function.parse (node_modules/acorn/dist/acorn.js:651:37)
      at Object.parse (node_modules/acorn/dist/acorn.js:6024:19)
      at parse (src/unit-test-helpers.js:66:31)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:15:37)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        73.128 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 09:59:01 info: ----------------------------------------------
2024-08-10 09:59:01 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 09:59:01 info: ----------------------------------------------
2024-08-10 09:59:24 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js (16.795 s)
  giveCompliment
    √ should exist and be executable (1 ms)
    √ should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (2 ms)
    √ should take a single parameter (1 ms)
    √ should include a `compliments` array inside its function body (1 ms)
    √ the `compliments` array should be initialized with 10 strings (1 ms)
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    TypeError: giveCompliment is not a function

      63 |
      64 |     const spy = jest.spyOn(Math, 'random').mockReturnValue(0);
    > 65 |     const received = giveCompliment(name);
         |                      ^
      66 |
      67 |     expect(
      68 |       spy.mock.calls.length > 0 ? '' : 'compliment is not randomly selected'

      at Object.giveCompliment (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:65:22)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 6 passed, 7 total
Snapshots:   0 total
Time:        17.592 s, estimated 73 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 10:02:33 info: ----------------------------------------------
2024-08-10 10:02:33 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 10:02:33 info: ----------------------------------------------
2024-08-10 10:03:05 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js (25.05 s)
  giveCompliment
    × should exist and be executable (4 ms)
    √ should have all TODO comments removed (1 ms)
    √ `giveCompliment` should not contain unneeded console.log calls (1 ms)
    × should take a single parameter (2 ms)
    √ should include a `compliments` array inside its function body (1 ms)
    √ the `compliments` array should be initialized with 10 strings (2 ms)
    × should give a random compliment: You are `compliment`, `name`! (1 ms)

  ● giveCompliment › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      32 |
      33 |   test('should exist and be executable', () => {
    > 34 |     expect(module.giveCompliment).toBeDefined();
         |                                   ^
      35 |   });
      36 |
      37 |   testTodosRemoved(() => source);

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:34:35)

  ● giveCompliment › should take a single parameter

    expect(received).toHaveLength(expected)

    Matcher error: received value must have a length property whose value must be a number

    Received has value: undefined

      40 |
      41 |   test('should take a single parameter', () => {
    > 42 |     expect(module.giveCompliment).toHaveLength(1);
         |                                   ^
      43 |   });
      44 |
      45 |   test('should include a `compliments` array inside its function body', () => {

      at Object.toHaveLength (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:42:35)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    expect(received).toBeDefined()

    Received: undefined

      55 |
      56 |   test('should give a random compliment: You are `compliment`, `name`!', () => {
    > 57 |     expect(giveCompliment).toBeDefined();
         |                            ^
      58 |     expect(state.compliments).toBeDefined();
      59 |
      60 |     const name = 'HackYourFuture';

      at Object.toBeDefined (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:57:28)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 4 passed, 7 total
Snapshots:   0 total
Time:        26.002 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 10:05:10 info: ----------------------------------------------
2024-08-10 10:05:10 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 10:05:10 info: ----------------------------------------------
2024-08-10 10:05:26 info: All unit tests passed.
2024-08-10 10:05:35 info: All steps were completed successfully
2024-08-10 10:16:21 info: ----------------------------------------------
2024-08-10 10:16:21 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 10:16:21 info: ----------------------------------------------
2024-08-10 10:16:28 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-giveCompliment.test.js --colors
Debugger attached.
Debugger attached.
 FAIL  1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js
  giveCompliment
    × should exist and be executable (1 ms)
    × should have all TODO comments removed
    × `giveCompliment` should not contain unneeded console.log calls
    × should take a single parameter
    × should include a `compliments` array inside its function body
    × the `compliments` array should be initialized with 10 strings
    × should give a random compliment: You are `compliment`, `name`!

  ● giveCompliment › should exist and be executable

    TypeError: Cannot read properties of undefined (reading 'push')

      30 |             for (const elem of init.elements) {
      31 |               if (elem && elem.type === 'Literal') {
    > 32 |                 state.compliment.push(elem.value);
         |                                  ^
      33 |               }
      34 |             }
      35 |           }

      at Object.push [as VariableDeclarator] (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:32:34)
      at c (node_modules/acorn-walk/dist/walk.js:30:43)
      at Object.c [as VariableDeclaration] (node_modules/acorn-walk/dist/walk.js:280:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as Function] (node_modules/acorn-walk/dist/walk.js:296:5)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as FunctionDeclaration] (node_modules/acorn-walk/dist/walk.js:274:62)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as ExportDefaultDeclaration] (node_modules/acorn-walk/dist/walk.js:404:9)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at simple (node_modules/acorn-walk/dist/walk.js:31:6)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:22:13)

  ● giveCompliment › should have all TODO comments removed

    TypeError: Cannot read properties of undefined (reading 'push')

      30 |             for (const elem of init.elements) {
      31 |               if (elem && elem.type === 'Literal') {
    > 32 |                 state.compliment.push(elem.value);
         |                                  ^
      33 |               }
      34 |             }
      35 |           }

      at Object.push [as VariableDeclarator] (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:32:34)
      at c (node_modules/acorn-walk/dist/walk.js:30:43)
      at Object.c [as VariableDeclaration] (node_modules/acorn-walk/dist/walk.js:280:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as Function] (node_modules/acorn-walk/dist/walk.js:296:5)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as FunctionDeclaration] (node_modules/acorn-walk/dist/walk.js:274:62)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as ExportDefaultDeclaration] (node_modules/acorn-walk/dist/walk.js:404:9)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at simple (node_modules/acorn-walk/dist/walk.js:31:6)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:22:13)

  ● giveCompliment › `giveCompliment` should not contain unneeded console.log calls

    TypeError: Cannot read properties of undefined (reading 'push')

      30 |             for (const elem of init.elements) {
      31 |               if (elem && elem.type === 'Literal') {
    > 32 |                 state.compliment.push(elem.value);
         |                                  ^
      33 |               }
      34 |             }
      35 |           }

      at Object.push [as VariableDeclarator] (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:32:34)
      at c (node_modules/acorn-walk/dist/walk.js:30:43)
      at Object.c [as VariableDeclaration] (node_modules/acorn-walk/dist/walk.js:280:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as Function] (node_modules/acorn-walk/dist/walk.js:296:5)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as FunctionDeclaration] (node_modules/acorn-walk/dist/walk.js:274:62)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as ExportDefaultDeclaration] (node_modules/acorn-walk/dist/walk.js:404:9)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at simple (node_modules/acorn-walk/dist/walk.js:31:6)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:22:13)

  ● giveCompliment › should take a single parameter

    TypeError: Cannot read properties of undefined (reading 'push')

      30 |             for (const elem of init.elements) {
      31 |               if (elem && elem.type === 'Literal') {
    > 32 |                 state.compliment.push(elem.value);
         |                                  ^
      33 |               }
      34 |             }
      35 |           }

      at Object.push [as VariableDeclarator] (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:32:34)
      at c (node_modules/acorn-walk/dist/walk.js:30:43)
      at Object.c [as VariableDeclaration] (node_modules/acorn-walk/dist/walk.js:280:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as Function] (node_modules/acorn-walk/dist/walk.js:296:5)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as FunctionDeclaration] (node_modules/acorn-walk/dist/walk.js:274:62)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as ExportDefaultDeclaration] (node_modules/acorn-walk/dist/walk.js:404:9)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at simple (node_modules/acorn-walk/dist/walk.js:31:6)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:22:13)

  ● giveCompliment › should include a `compliments` array inside its function body

    TypeError: Cannot read properties of undefined (reading 'push')

      30 |             for (const elem of init.elements) {
      31 |               if (elem && elem.type === 'Literal') {
    > 32 |                 state.compliment.push(elem.value);
         |                                  ^
      33 |               }
      34 |             }
      35 |           }

      at Object.push [as VariableDeclarator] (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:32:34)
      at c (node_modules/acorn-walk/dist/walk.js:30:43)
      at Object.c [as VariableDeclaration] (node_modules/acorn-walk/dist/walk.js:280:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as Function] (node_modules/acorn-walk/dist/walk.js:296:5)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as FunctionDeclaration] (node_modules/acorn-walk/dist/walk.js:274:62)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as ExportDefaultDeclaration] (node_modules/acorn-walk/dist/walk.js:404:9)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at simple (node_modules/acorn-walk/dist/walk.js:31:6)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:22:13)

  ● giveCompliment › the `compliments` array should be initialized with 10 strings

    TypeError: Cannot read properties of undefined (reading 'push')

      30 |             for (const elem of init.elements) {
      31 |               if (elem && elem.type === 'Literal') {
    > 32 |                 state.compliment.push(elem.value);
         |                                  ^
      33 |               }
      34 |             }
      35 |           }

      at Object.push [as VariableDeclarator] (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:32:34)
      at c (node_modules/acorn-walk/dist/walk.js:30:43)
      at Object.c [as VariableDeclaration] (node_modules/acorn-walk/dist/walk.js:280:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as Function] (node_modules/acorn-walk/dist/walk.js:296:5)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as FunctionDeclaration] (node_modules/acorn-walk/dist/walk.js:274:62)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as ExportDefaultDeclaration] (node_modules/acorn-walk/dist/walk.js:404:9)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at simple (node_modules/acorn-walk/dist/walk.js:31:6)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:22:13)

  ● giveCompliment › should give a random compliment: You are `compliment`, `name`!

    TypeError: Cannot read properties of undefined (reading 'push')

      30 |             for (const elem of init.elements) {
      31 |               if (elem && elem.type === 'Literal') {
    > 32 |                 state.compliment.push(elem.value);
         |                                  ^
      33 |               }
      34 |             }
      35 |           }

      at Object.push [as VariableDeclarator] (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:32:34)
      at c (node_modules/acorn-walk/dist/walk.js:30:43)
      at Object.c [as VariableDeclaration] (node_modules/acorn-walk/dist/walk.js:280:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as Function] (node_modules/acorn-walk/dist/walk.js:296:5)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as FunctionDeclaration] (node_modules/acorn-walk/dist/walk.js:274:62)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as ExportDefaultDeclaration] (node_modules/acorn-walk/dist/walk.js:404:9)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c (node_modules/acorn-walk/dist/walk.js:186:39)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at Object.c [as StaticBlock] (node_modules/acorn-walk/dist/walk.js:198:7)
      at c (node_modules/acorn-walk/dist/walk.js:29:24)
      at simple (node_modules/acorn-walk/dist/walk.js:31:6)
      at Object.<anonymous> (1-JavaScript/Week2/unit-tests/ex1-giveCompliment.test.js:22:13)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 7 total
Snapshots:   0 total
Time:        1.736 s, estimated 9 s
Ran all test suites matching /ex1-giveCompliment.test.js/i.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-08-10 10:16:50 info: ----------------------------------------------
2024-08-10 10:16:50 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 10:16:50 info: ----------------------------------------------
2024-08-10 10:16:58 info: All unit tests passed.
2024-08-10 10:17:07 info: All steps were completed successfully
2024-08-10 10:21:24 info: ----------------------------------------------
2024-08-10 10:21:24 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 10:21:24 info: ----------------------------------------------
2024-08-10 11:31:23 info: All unit tests passed.
2024-08-10 11:31:33 info: All steps were completed successfully
2024-08-10 11:32:00 info: ----------------------------------------------
2024-08-10 11:32:00 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-08-10 11:32:00 info: ----------------------------------------------
2024-08-10 11:32:05 info: All unit tests passed.
2024-08-10 11:32:11 info: All steps were completed successfully
