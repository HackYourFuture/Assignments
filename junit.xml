<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="39" failures="30" errors="0" time="1.188">
  <testsuite name="api-wk1-ex4-pokerDiceAll" errors="0" failures="5" skipped="0" timestamp="2024-08-22T08:19:00" time="0.346" tests="7">
    <testcase classname="api-wk1-ex4-pokerDiceAll should exist and be executable" name="api-wk1-ex4-pokerDiceAll should exist and be executable" time="0.002">
    </testcase>
    <testcase classname="api-wk1-ex4-pokerDiceAll should have all TODO comments removed" name="api-wk1-ex4-pokerDiceAll should have all TODO comments removed" time="0.001">
      <failure>expect(received).toBeFalsy()

Received: true</failure>
    </testcase>
    <testcase classname="api-wk1-ex4-pokerDiceAll `rollDice` should not contain unneeded console.log calls" name="api-wk1-ex4-pokerDiceAll `rollDice` should not contain unneeded console.log calls" time="0.001">
    </testcase>
    <testcase classname="api-wk1-ex4-pokerDiceAll should use `dice.map()`" name="api-wk1-ex4-pokerDiceAll should use `dice.map()`" time="0">
      <failure>expect(received).toBeDefined()

Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex4-pokerDiceAll should use `Promise.all()`" name="api-wk1-ex4-pokerDiceAll should use `Promise.all()`" time="0">
      <failure>expect(received).toBeDefined()

Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex4-pokerDiceAll should resolve when all dice settle successfully" name="api-wk1-ex4-pokerDiceAll should resolve when all dice settle successfully" time="0">
      <failure>rollDie is not a function</failure>
      <failure>expect.assertions(4)

Expected four assertions to be called but received one assertion call.</failure>
    </testcase>
    <testcase classname="api-wk1-ex4-pokerDiceAll should reject with an Error when a die rolls off the table" name="api-wk1-ex4-pokerDiceAll should reject with an Error when a die rolls off the table" time="0.001">
      <failure>expect.assertions(3)

Expected three assertions to be called but received two assertion calls.</failure>
    </testcase>
  </testsuite>
  <testsuite name="api-wk1-ex2-checkDoubleDigits" errors="0" failures="9" skipped="0" timestamp="2024-08-22T08:19:00" time="0.093" tests="11">
    <testcase classname="api-wk1-ex2-checkDoubleDigits should exist and be executable" name="api-wk1-ex2-checkDoubleDigits should exist and be executable" time="0">
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits should have all TODO comments removed" name="api-wk1-ex2-checkDoubleDigits should have all TODO comments removed" time="0">
      <failure>expect(received).toBeFalsy()

Received: true</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits `checkDoubleDigits` should not contain unneeded console.log calls" name="api-wk1-ex2-checkDoubleDigits `checkDoubleDigits` should not contain unneeded console.log calls" time="0">
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits should call new Promise()" name="api-wk1-ex2-checkDoubleDigits should call new Promise()" time="0.001">
      <failure>expect(received).toBeDefined()

Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits `resolve()` should be called with a one argument" name="api-wk1-ex2-checkDoubleDigits `resolve()` should be called with a one argument" time="0.001">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits `reject()` should be called with a one argument" name="api-wk1-ex2-checkDoubleDigits `reject()` should be called with a one argument" time="0">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits should be a function that takes a single argument" name="api-wk1-ex2-checkDoubleDigits should be a function that takes a single argument" time="0.001">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits (9) should return a rejected promise with an Error object" name="api-wk1-ex2-checkDoubleDigits (9) should return a rejected promise with an Error object" time="0">
      <failure>expect(received).toBeInstanceOf(expected)

Expected constructor: Promise

Received value has no prototype
Received value: undefined</failure>
      <failure>expect.assertions(2)

Expected two assertions to be called but received one assertion call.</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits (10) should return a promise that resolves to &quot;This is a double digit number!&quot;" name="api-wk1-ex2-checkDoubleDigits (10) should return a promise that resolves to &quot;This is a double digit number!&quot;" time="0">
      <failure>expect(received).toBeInstanceOf(expected)

Expected constructor: Promise

Received value has no prototype
Received value: undefined</failure>
      <failure>expect.assertions(3)

Expected three assertions to be called but received two assertion calls.</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits (99) should return a promise that resolves to &quot;This is a double digit number!&quot;" name="api-wk1-ex2-checkDoubleDigits (99) should return a promise that resolves to &quot;This is a double digit number!&quot;" time="0">
      <failure>expect(received).toBeInstanceOf(expected)

Expected constructor: Promise

Received value has no prototype
Received value: undefined</failure>
      <failure>expect.assertions(2)

Expected two assertions to be called but received one assertion call.</failure>
    </testcase>
    <testcase classname="api-wk1-ex2-checkDoubleDigits (100) should return a rejected promise with an Error object" name="api-wk1-ex2-checkDoubleDigits (100) should return a rejected promise with an Error object" time="0.001">
      <failure>expect(received).toBeInstanceOf(expected)

Expected constructor: Promise

Received value has no prototype
Received value: undefined</failure>
      <failure>expect.assertions(2)

Expected two assertions to be called but received one assertion call.</failure>
    </testcase>
  </testsuite>
  <testsuite name="api-wk1-ex3-rollDie" errors="0" failures="6" skipped="0" timestamp="2024-08-22T08:19:01" time="0.093" tests="7">
    <testcase classname="api-wk1-ex3-rollDie should exist and be executable" name="api-wk1-ex3-rollDie should exist and be executable" time="0.001">
    </testcase>
    <testcase classname="api-wk1-ex3-rollDie should have all TODO comments removed" name="api-wk1-ex3-rollDie should have all TODO comments removed" time="0">
      <failure>expect(received).toBeFalsy()

Received: true</failure>
    </testcase>
    <testcase classname="api-wk1-ex3-rollDie should call `new Promise()`" name="api-wk1-ex3-rollDie should call `new Promise()`" time="0">
      <failure>expect(received).toBeDefined()

Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex3-rollDie `resolve()` should be called with a one argument" name="api-wk1-ex3-rollDie `resolve()` should be called with a one argument" time="0.001">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex3-rollDie `reject()` should be called with a one argument" name="api-wk1-ex3-rollDie `reject()` should be called with a one argument" time="0">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex3-rollDie should resolve when the die settles successfully" name="api-wk1-ex3-rollDie should resolve when the die settles successfully" time="0.001">
      <failure>callback is not a function</failure>
      <failure>expect.assertions(3)

Expected three assertions to be called but received one assertion call.</failure>
    </testcase>
    <testcase classname="api-wk1-ex3-rollDie should reject with an Error when the die rolls off the table" name="api-wk1-ex3-rollDie should reject with an Error when the die rolls off the table" time="0">
      <failure>expect.assertions(3)

Expected three assertions to be called but received two assertion calls.</failure>
    </testcase>
  </testsuite>
  <testsuite name="api-wk1-ex1-johnWho" errors="0" failures="7" skipped="0" timestamp="2024-08-22T08:19:01" time="0.086" tests="9">
    <testcase classname="api-wk1-ex1-johnWho should exist and be executable" name="api-wk1-ex1-johnWho should exist and be executable" time="0.001">
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho should have all TODO comments removed" name="api-wk1-ex1-johnWho should have all TODO comments removed" time="0">
      <failure>expect(received).toBeFalsy()

Received: true</failure>
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho `getAnonName` should not contain unneeded console.log calls" name="api-wk1-ex1-johnWho `getAnonName` should not contain unneeded console.log calls" time="0">
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho should call `new Promise()`" name="api-wk1-ex1-johnWho should call `new Promise()`" time="0.001">
      <failure>expect(received).toBeDefined()

Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho should take a single argument" name="api-wk1-ex1-johnWho should take a single argument" time="0.001">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: 2</failure>
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho `resolve()` should be called with a one argument" name="api-wk1-ex1-johnWho `resolve()` should be called with a one argument" time="0">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho `reject()` should be called with a one argument" name="api-wk1-ex1-johnWho `reject()` should be called with a one argument" time="0">
      <failure>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: undefined</failure>
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho should resolve when called with a string argument" name="api-wk1-ex1-johnWho should resolve when called with a string argument" time="0.001">
      <failure>callback is not a function</failure>
      <failure>expect.assertions(3)

Expected three assertions to be called but received one assertion call.</failure>
    </testcase>
    <testcase classname="api-wk1-ex1-johnWho should reject with an Error object when called without an argument" name="api-wk1-ex1-johnWho should reject with an Error object when called without an argument" time="0">
      <failure>callback is not a function</failure>
      <failure>expect.assertions(3)

Expected three assertions to be called but received one assertion call.</failure>
    </testcase>
  </testsuite>
  <testsuite name="api-wk1-ex5-pokerDiceChain" errors="0" failures="3" skipped="0" timestamp="2024-08-22T08:19:01" time="0.081" tests="5">
    <testcase classname="api-wk1-ex5-pokerDiceChain should exist and be executable" name="api-wk1-ex5-pokerDiceChain should exist and be executable" time="0.001">
    </testcase>
    <testcase classname="api-wk1-ex5-pokerDiceChain should have all TODO comments removed" name="api-wk1-ex5-pokerDiceChain should have all TODO comments removed" time="0">
      <failure>expect(received).toBeFalsy()

Received: true</failure>
    </testcase>
    <testcase classname="api-wk1-ex5-pokerDiceChain `rollDice` should not contain unneeded console.log calls" name="api-wk1-ex5-pokerDiceChain `rollDice` should not contain unneeded console.log calls" time="0">
    </testcase>
    <testcase classname="api-wk1-ex5-pokerDiceChain should resolve when all dice settle successfully" name="api-wk1-ex5-pokerDiceChain should resolve when all dice settle successfully" time="0.001">
      <failure>rollDie is not a function</failure>
      <failure>expect.assertions(4)

Expected four assertions to be called but received one assertion call.</failure>
    </testcase>
    <testcase classname="api-wk1-ex5-pokerDiceChain should reject with an Error when a die rolls off the table" name="api-wk1-ex5-pokerDiceChain should reject with an Error when a die rolls off the table" time="0">
      <failure>expect.assertions(3)

Expected three assertions to be called but received two assertion calls.</failure>
    </testcase>
  </testsuite>
</testsuites>